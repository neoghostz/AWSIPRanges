# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pipenv wheel
        pip install flake8 pytest pytest-cov coverage
    - name: Install dependencies
      run: |
        pipenv lock -r --dev > requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./src --statistics
    - name: Test with pytest
      run: |
        PYTHONPATH=.:./src pytest --cov=src --cov-branch --cov-report term-missing ./tests
    - name: Build SAM Application
      uses: aws-actions/setup-sam@v1
      run: sam build --use-container -t .sam/transform.yaml -m ./requirements.txt -b ./build -s .
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip -r9 ${{ github.ref }}.zip ./build/*
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{ github.ref }}.zip
        asset_name: ${{ github.ref }}.zip
        asset_content_type: application/zip
